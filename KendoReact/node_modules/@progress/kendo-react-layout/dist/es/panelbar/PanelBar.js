var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import PanelBarItem from './PanelBarItem';
import { renderChildren, getInitialState } from './util';
import SelectionService from './services/selectionService';
import NavigationService, { NavigationAction } from './services/navigationService';
import { classNames } from '@progress/kendo-react-common';
var PanelBar = /** @class */ (function (_super) {
    __extends(PanelBar, _super);
    function PanelBar(props) {
        var _this = _super.call(this, props) || this;
        _this._element = null;
        /**
         * @hidden
         */
        _this.handleSelect = function (event) {
            _this._selectionService.select(event.uniquePrivateKey, renderChildren(_this.props.animation, _this.state, _this.handleSelect, _this.props.children), _this.state.expanded);
            _this._selectionService.focus(event.uniquePrivateKey, 0, renderChildren(_this.props.animation, _this.state, _this.handleSelect, _this.props.children));
        };
        /**
         * @hidden
         */
        _this.onSelect = function (child, expanded) {
            _this.setState({ selected: child.props.uniquePrivateKey, expanded: expanded }, function () {
                if (_this.props.onSelect) {
                    _this.props.onSelect.call(undefined, {
                        target: child,
                        action: 'select'
                    });
                }
            });
        };
        /**
         * @hidden
         */
        _this.onFocus = function (child) {
            _this.activeDescendant = child.props.id;
            _this.setState({ focused: child.props.uniquePrivateKey });
        };
        /**
         * @hidden
         */
        _this.onNavigate = function (action) {
            switch (action) {
                case NavigationAction.Previous:
                    _this._selectionService.focus(_this.state.focused, -1, renderChildren(_this.props.animation, _this.state, _this.handleSelect, _this.props.children));
                    break;
                case NavigationAction.Next:
                    _this._selectionService.focus(_this.state.focused, 1, renderChildren(_this.props.animation, _this.state, _this.handleSelect, _this.props.children));
                    break;
                case NavigationAction.Toggle:
                    _this._selectionService.select(_this.state.focused, renderChildren(_this.props.animation, _this.state, _this.handleSelect, _this.props.children), _this.state.expanded);
                    break;
                default:
            }
        };
        _this.handleWrapperFocus = function (e) {
            _this.setState({ wrapperFocused: e.nativeEvent.type === 'focus' });
        };
        _this.handleKeyDown = function (event) {
            var rtl = _this._element && (getComputedStyle(_this._element).direction === 'rtl') || false;
            var target = event.target, currentTarget = event.currentTarget;
            if (target === currentTarget) {
                _this._navigationService.navigate(event, rtl);
            }
        };
        _this.state = getInitialState(props, props.expandMode || 'multiple');
        _this._selectionService = new SelectionService(_this.onSelect, _this.onFocus, _this.props.expandMode || 'multiple');
        _this._navigationService = new NavigationService(_this.onNavigate);
        return _this;
    }
    /**
     * @hidden
     */
    PanelBar.prototype.componentWillReceiveProps = function (newProps) {
        if (newProps.expandMode !== this.props.expandMode) {
            this._selectionService.setExpandMode(newProps.expandMode);
        }
        if (newProps.selected !== this.state.selected && newProps.selected !== undefined) {
            this.setState({ selected: newProps.selected });
        }
    };
    /**
     * @hidden
     */
    PanelBar.prototype.render = function () {
        var _this = this;
        var ariaProps = {
            'aria-activedescendant': this.activeDescendant
        };
        var children = renderChildren(this.props.animation, this.state, this.handleSelect, this.props.children);
        var className = classNames('k-widget', 'k-panelbar', this.props.className);
        return (React.createElement("div", __assign({ ref: function (div) { _this._element = div; }, dir: this.props.dir, role: 'tree', tabIndex: 0, onKeyDown: this.handleKeyDown, onFocus: this.handleWrapperFocus, onBlur: this.handleWrapperFocus, className: className }, ariaProps), children));
    };
    /**
     * @hidden
     */
    PanelBar.propTypes = {
        animation: PropTypes.bool,
        children: function (props, propName) {
            var prop = props[propName];
            if (prop) {
                if (Array.isArray(prop)) {
                    for (var _i = 0, prop_1 = prop; _i < prop_1.length; _i++) {
                        var value = prop_1[_i];
                        if (!value.type || value.type !== PanelBarItem) {
                            return new Error('PanelBar children should be either PanelBarItem or Array of PanelBarItem.');
                        }
                    }
                }
                else {
                    if (prop.type !== PanelBarItem) {
                        return new Error('PanelBar child should be either PanelBarItem or Array of PanelBarItem.');
                    }
                }
            }
        },
        dir: PropTypes.string,
        selected: PropTypes.string,
        expanded: PropTypes.arrayOf(PropTypes.string),
        focused: PropTypes.string,
        expandMode: PropTypes.oneOf(['single', 'multiple']),
        className: PropTypes.string,
        onSelect: PropTypes.func
    };
    /**
     * @hidden
     */
    PanelBar.defaultProps = {
        expandMode: 'multiple',
        animation: true
    };
    return PanelBar;
}(React.Component));
export default PanelBar;
//# sourceMappingURL=PanelBar.js.map