import * as React from 'react';
import * as PropTypes from 'prop-types';
import { WindowProps } from './WindowProps';
import { Draggable } from '@progress/kendo-react-common';
import { windowStage } from './StageEnum';
interface WindowState {
    stage: windowStage | string;
    isDragging: boolean;
    top: number;
    left: number;
    width: number;
    height: number;
}
export declare class Window extends React.Component<WindowProps, WindowState> {
    /**
     * @hidden
     */
    static propTypes: {
        id: PropTypes.Requireable<any>;
        width: PropTypes.Requireable<any>;
        height: PropTypes.Requireable<any>;
        left: PropTypes.Requireable<any>;
        top: PropTypes.Requireable<any>;
        initialwidth: PropTypes.Requireable<any>;
        initialHeight: PropTypes.Requireable<any>;
        initialLeft: PropTypes.Requireable<any>;
        initialTop: PropTypes.Requireable<any>;
        minWidth: PropTypes.Requireable<any>;
        minHeight: PropTypes.Requireable<any>;
        resizable: PropTypes.Requireable<any>;
        draggable: PropTypes.Requireable<any>;
        title: PropTypes.Requireable<any>;
        shouldUpdateOnDrag: PropTypes.Requireable<any>;
        stage: PropTypes.Requireable<any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        minWidth: number;
        minHeight: number;
        resizable: boolean;
        draggable: boolean;
    };
    /**
     * @hidden
     */
    windowElement?: any;
    /**
     * @hidden
     */
    windowTitle?: any;
    draggable: Draggable | null;
    private windowCoordinatesState?;
    constructor(props: WindowProps);
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    onPress: (data: any) => void;
    /**
     * @hidden
     */
    onDrag: (data: any) => void;
    /**
     * @hidden
     */
    onRelease: (data: any) => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    private readonly top;
    private readonly left;
    private readonly width;
    private readonly height;
    private readonly windowStage;
    private handleKeyDown;
    private getInitialTop;
    private getInitialLeft;
    private handleMinimize;
    private handleFullscreen;
    private handleRestore;
    private handleCloseWindow;
    private handleDoubleClick;
    private handleResize;
    private dispatchMoveEvent;
    private handleBrowserWindowResize;
}
export {};
