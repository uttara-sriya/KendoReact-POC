var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { dispatchEvent, Keys, classNames, Draggable } from '@progress/kendo-react-common';
import { registerForLocalization, provideLocalizationService } from '@progress/kendo-react-intl';
import { messages, sliderIncreaseValue, sliderDecreaseValue, sliderDragTitle } from './../messages';
import { SLIDER_LABEL_ATTRIBUTE } from './SliderLabel';
/**
 * Represents the [KendoReact Slider component]({% slug overview_slider%}).
 */
var Slider = /** @class */ (function (_super) {
    __extends(Slider, _super);
    function Slider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @hidden
         */
        _this.state = {
            value: _this.props.defaultValue === undefined ? _this.props.min : _this.props.defaultValue,
            focused: false
        };
        /**
         * @hidden
         */
        _this.buttons = function (props) {
            if (!props.enabled) {
                return props.children;
            }
            return (React.createElement(React.Fragment, null,
                React.createElement("a", { className: "k-button k-button-decrease", style: { position: 'relative' }, title: props.decrementTitle, onClick: props.decrement },
                    React.createElement("span", { className: classNames('k-icon', {
                            'k-i-arrow-s': _this.props.vertical,
                            'k-i-arrow-w': !_this.props.vertical
                        }) })),
                props.children,
                React.createElement("a", { className: "k-button k-button-increase", style: { position: 'relative' }, title: props.incrementTitle, onClick: props.increment },
                    React.createElement("span", { className: classNames('k-icon', {
                            'k-i-arrow-n': _this.props.vertical,
                            'k-i-arrow-e': !_this.props.vertical
                        }) }))));
        };
        _this.isLabel = function (target) {
            var currentTarget = target;
            while (currentTarget) {
                if (Boolean(currentTarget.getAttribute(SLIDER_LABEL_ATTRIBUTE))) {
                    return true;
                }
                currentTarget = currentTarget.parentElement;
            }
            return false;
        };
        _this.onFocus = function () {
            _this.setState({ focused: true });
        };
        _this.onBlur = function () {
            _this.setState({ focused: false });
        };
        _this.onKeyDown = function (e) {
            var newValue = undefined;
            if (e.keyCode === Keys.left || e.keyCode === Keys.down) {
                newValue = _this.state.value - (_this.props.step || 0);
            }
            else if (e.keyCode === Keys.right || e.keyCode === Keys.up) {
                newValue = _this.state.value + (_this.props.step || 0);
            }
            else if (e.keyCode === Keys.home) {
                newValue = _this.props.min;
            }
            else if (e.keyCode === Keys.end) {
                newValue = _this.props.max;
            }
            if (newValue !== undefined) {
                e.preventDefault();
                _this.change(e, newValue);
            }
        };
        _this.decrement = function (e) {
            e.preventDefault();
            _this.change(e, _this.state.value - (_this.props.step || 0));
        };
        _this.increment = function (e) {
            e.preventDefault();
            _this.change(e, _this.state.value + (_this.props.step || 0));
        };
        _this.dragStart = function (e) {
            if (!_this.isLabel(e.event.originalEvent.target)) {
                if (e.event.isTouch) {
                    e.event.originalEvent.preventDefault();
                }
                _this.drag(e);
            }
        };
        _this.dragOver = function (e) {
            e.event.originalEvent.preventDefault();
            _this.drag(e);
        };
        _this.drag = function (e) {
            var computed = e.element.getBoundingClientRect();
            var distance = _this.props.vertical ? (computed.bottom - e.event.clientY) : (e.event.clientX - computed.left);
            var size = _this.props.vertical ? computed.height : computed.width;
            var percentage = (distance / size);
            _this.change(e, _this.props.min + percentage * (_this.props.max - _this.props.min));
        };
        return _this;
    }
    /**
     * @hidden
     */
    Slider.getDerivedStateFromProps = function (props, _) {
        if (props.value === undefined) {
            return null;
        }
        return { value: props.value };
    };
    /**
     * @hidden
     */
    Slider.prototype.render = function () {
        var _this = this;
        var lS = provideLocalizationService(this);
        var percentValue = ((this.state.value - this.props.min) / (this.props.max - this.props.min)) * 100;
        var trackStyles = this.props.vertical
            ? { marginTop: '0.5rem', marginBottom: '0.5rem' }
            : { marginLeft: '0.5rem', marginRight: '0.5rem' };
        var sliderItemsStyle = this.props.vertical
            ? { paddingTop: 0, height: '100%' }
            : {};
        return (React.createElement("div", { "aria-valuemin": this.props.min, "aria-valuemax": this.props.max, "aria-valuenow": this.state.value, role: "slider", style: this.props.style || (this.props.vertical ? { height: '200px' } : { width: '200px' }), tabIndex: this.props.disabled ? undefined :
                (this.props.tabIndex || 0), onFocus: this.onFocus, onBlur: this.onBlur, onKeyDown: this.onKeyDown, className: classNames('k-slider k-widget k-state-default', this.props.className, {
                'k-state-focused': this.state.focused,
                'k-state-disabled': this.props.disabled,
                'k-slider-horizontal': !this.props.vertical,
                'k-slider-vertical': this.props.vertical
            }) },
            React.createElement("div", { className: "k-slider-wrap k-slider-buttons", style: {
                    display: 'flex',
                    position: 'relative',
                    flexDirection: this.props.vertical ? 'column-reverse' : 'row'
                } },
                React.createElement(this.buttons, { enabled: this.props.buttons, decrement: this.decrement, increment: this.increment, incrementTitle: lS.toLanguageString(sliderIncreaseValue, messages[sliderIncreaseValue]), decrementTitle: lS.toLanguageString(sliderDecreaseValue, messages[sliderDecreaseValue]) },
                    React.createElement(Draggable, { onDrag: this.dragOver, onPress: this.dragStart },
                        React.createElement("div", { className: "k-slider-track-wrap", style: __assign({ flexGrow: 1, position: 'relative', touchAction: 'none' }, trackStyles) },
                            this.props.children && (React.createElement("ul", { className: "k-reset k-slider-items", style: __assign({ margin: 0 }, sliderItemsStyle) }, React.Children.map(this.props.children, function (child) {
                                return child && React.cloneElement(child, {
                                    position: 100 * (child.props.position - _this.props.min) /
                                        (_this.props.max - _this.props.min),
                                    vertical: _this.props.vertical
                                }, child.props.children);
                            }))),
                            React.createElement("div", { className: "k-slider-track", style: this.props.vertical
                                    ? { bottom: 0, height: '100%' }
                                    : { left: 0, width: '100%' } },
                                React.createElement("div", { className: "k-slider-selection", style: this.props.vertical
                                        ? { height: percentValue + '%' }
                                        : { width: percentValue + '%' } }),
                                React.createElement("a", { className: "k-draghandle", title: lS.toLanguageString(sliderDragTitle, messages[sliderDragTitle]), style: this.props.vertical
                                        ? { bottom: 'calc(' + percentValue + '% - 8px)', zIndex: 1 }
                                        : { left: 'calc(' + percentValue + '% - 8px)', zIndex: 1 } }, lS.toLanguageString(sliderDragTitle, messages[sliderDragTitle])))))))));
    };
    Slider.prototype.change = function (e, value) {
        value = Math.min(Math.max(value, this.props.min), this.props.max);
        this.setState({ value: value });
        dispatchEvent(this.props.onChange, e, this, { value: value });
    };
    /**
     * @hidden
     */
    Slider.propTypes = {
        value: PropTypes.number,
        vertical: PropTypes.bool
        // TODO: validation when buttons is set to true, but no step is provided
    };
    return Slider;
}(React.Component));
export { Slider };
registerForLocalization(Slider);
//# sourceMappingURL=Slider.js.map